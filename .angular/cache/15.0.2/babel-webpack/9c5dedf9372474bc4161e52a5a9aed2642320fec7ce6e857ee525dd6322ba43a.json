{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component, HostListener } from '@angular/core';\nimport { distinctUntilChanged, Subscription } from 'rxjs';\nimport { DirectionsEnum } from '../../enum/directions.enum';\nimport { GameConstants } from '../../constants/game-constants';\nlet GameComponent = class GameComponent {\n  constructor(gameService, dialog, renderer, cdr) {\n    this.gameService = gameService;\n    this.dialog = dialog;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.sub$ = new Subscription();\n    this.allPlayers = [];\n    this.GameConstants = GameConstants;\n  }\n\n  onKeyup(e) {\n    if (!this.currentPlayer) {\n      return;\n    }\n\n    const {\n      playerNumber,\n      leftValue\n    } = this.currentPlayer;\n\n    switch (e.key) {\n      /* right and left arrows work only for players #1 and #2 */\n      case 'ArrowRight':\n        if (!GameConstants.HorizontalPlayerNumbers.includes(playerNumber) || leftValue >= GameConstants.MaximumPlatformLeftPosition) {\n          return;\n        }\n\n        this.currentPlayer = { ...this.currentPlayer,\n          leftValue: this.currentPlayer.leftValue + 10\n        };\n\n        if (this.dropDirectionTimeOut) {\n          clearTimeout(this.dropDirectionTimeOut);\n        }\n\n        this.gameService.movePlatform(this.currentPlayer, leftValue + 10, DirectionsEnum.RIGHT);\n        break;\n\n      case 'ArrowLeft':\n        if (!GameConstants.HorizontalPlayerNumbers.includes(playerNumber) || leftValue <= 0) {\n          return;\n        }\n\n        this.currentPlayer = { ...this.currentPlayer,\n          leftValue: this.currentPlayer.leftValue - 10\n        };\n\n        if (this.dropDirectionTimeOut) {\n          clearTimeout(this.dropDirectionTimeOut);\n        }\n\n        this.gameService.movePlatform(this.currentPlayer, leftValue - 10, DirectionsEnum.LEFT);\n        break;\n\n      /* up and down arrows work only for players #3 and #4 */\n\n      case 'ArrowUp':\n        if (GameConstants.HorizontalPlayerNumbers.includes(playerNumber) || leftValue >= GameConstants.MaximumPlatformLeftPosition) {\n          return;\n        }\n\n        if (playerNumber === GameConstants.LeftSidePlayerNumber) {\n          this.currentPlayer = { ...this.currentPlayer,\n            leftValue: this.currentPlayer.leftValue + 10\n          };\n          this.gameService.movePlatform(this.currentPlayer, leftValue + 10, DirectionsEnum.TOP);\n        }\n\n        if (playerNumber === GameConstants.RightSidePlayerNumber) {\n          this.currentPlayer = { ...this.currentPlayer,\n            leftValue: this.currentPlayer.leftValue - 10\n          };\n          this.gameService.movePlatform(this.currentPlayer, leftValue - 10, DirectionsEnum.TOP);\n        }\n\n        if (this.dropDirectionTimeOut) {\n          clearTimeout(this.dropDirectionTimeOut);\n        }\n\n        break;\n\n      case 'ArrowDown':\n        if (GameConstants.HorizontalPlayerNumbers.includes(playerNumber) || leftValue <= 0) {\n          return;\n        }\n\n        if (playerNumber === GameConstants.LeftSidePlayerNumber) {\n          this.currentPlayer = { ...this.currentPlayer,\n            leftValue: this.currentPlayer.leftValue - 10\n          };\n          this.gameService.movePlatform(this.currentPlayer, leftValue - 10, DirectionsEnum.BOTTOM);\n        }\n\n        if (playerNumber === GameConstants.RightSidePlayerNumber) {\n          this.currentPlayer = { ...this.currentPlayer,\n            leftValue: this.currentPlayer.leftValue + 10\n          };\n          this.gameService.movePlatform(this.currentPlayer, leftValue + 10, DirectionsEnum.BOTTOM);\n        }\n\n        if (this.dropDirectionTimeOut) {\n          clearTimeout(this.dropDirectionTimeOut);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    this.dropDirectionTimeOut = setTimeout(() => {\n      this.gameService.stopPlatform();\n    }, 300);\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit() {\n    this.gameService.handleSocketConnections();\n    this.sub$.add(this.gameService.currentPlayer.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))).subscribe(currentPlayer => {\n      this.currentPlayer = currentPlayer;\n      this.cdr.detectChanges();\n    }));\n    this.sub$.add(this.gameService.playersNumbers.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))).subscribe(playersNumbers => {\n      this.playersNumbers = playersNumbers;\n      this.cdr.detectChanges();\n    }));\n    this.sub$.add(this.gameService.allPlayers.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))).subscribe(allPlayers => {\n      this.allPlayers = allPlayers;\n      this.cdr.detectChanges();\n    }));\n    this.sub$.add(this.gameService.ballPosition.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))).subscribe(ballPosition => {\n      this.ballPosition = ballPosition;\n      this.cdr.detectChanges();\n    }));\n    this.sub$.add(this.gameService.loserPlayerNumber.pipe(distinctUntilChanged((a, b) => a === b)).subscribe(loserPlayerNumber => {\n      this.loserPlayerNumber = loserPlayerNumber;\n      this.cdr.detectChanges();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.sub$.unsubscribe();\n  }\n\n};\n\n__decorate([HostListener('window:keydown', ['$event'])], GameComponent.prototype, \"onKeyup\", null);\n\nGameComponent = __decorate([Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], GameComponent);\nexport { GameComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}